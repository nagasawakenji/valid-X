<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="Nagasawa.valid_X.infra.mybatis.mapper.UserMapper">

    <resultMap id="UserSummaryMap" type="Nagasawa.valid_X.domain.dto.UserSummary">
        <result column="id"           property="id"/>
        <result column="username"     property="username"/>
        <result column="display_name" property="displayDisplayName"/> <!-- NG: タイポ防止のため注意 -->
    </resultMap>

    <!--select句-->
    <select id="findById" parameterType="Long" resultType="Nagasawa.valid_X.domain.model.User">
        SELECT
            u.id,
            u.username,
            u.display_name,
            u.created_at,
            u.locale,
            u.timezone
        FROM users u
        WHERE u.id = #{id}
    </select>

    <select id="findSummariesByIds" resultType="Nagasawa.valid_X.domain.dto.UserSummary">
        SELECT
        u.id,
        u.username,
        u.display_name   AS displayName,
        u.locale,
        u.timezone,
        FROM users u
        WHERE u.id IN
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
        ORDER BY array_position(
        ARRAY
        <foreach collection="ids" item="id" open="[" separator="," close="]">
            #{id}::bigint
        </foreach>
        , u.id
        )
    </select>

    <select id="findByEmail" parameterType="String" resultType="Long">
        SELECT
            user_id
        FROM user_emails
        WHERE email = #{email}
    </select>

    <select id="findByUsername" parameterType="String" resultType="Nagasawa.valid_X.domain.model.User">
        SELECT
            u.id,
            u.username,
            u.display_name,
            u.created_at,
            u.locale,
            u.timezone
        FROM users u
        WHERE u.username = #{username}
    </select>

    <select id="findFollowers" parameterType="Long" resultType="Nagasawa.valid_X.domain.model.User">
        SELECT
            u.id,
            u.username,
            u.display_name,
            u.created_at
        FROM users u
        JOIN follows f
        ON f.follower_id = u.id
        WHERE f.followee_id = #{userId}
        ORDER BY f.created_at DESC
    </select>

    <select id="findFollowees" parameterType="Long" resultType="Nagasawa.valid_X.domain.model.User">
        SELECT
            u.id,
            u.username,
            u.display_name,
            u.created_at,
            u.locale,
            u.timezone
        FROM users u
        JOIN follows f
        ON f.follower_id = u.id
        WHERE f.follower_id = #{userId}
        ORDER BY f.created_at DESC
    </select>

    <!-- username が存在するかチェック -->
    <select id="existsByUsername" parameterType="string" resultType="boolean">
        SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END
        FROM users
        WHERE username = #{username}
    </select>

    <!-- email が存在するかチェック -->
    <select id="existsByEmail" parameterType="string" resultType="boolean">
        SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END
        FROM user_emails
        WHERE email = #{email}
    </select>

    <!--insert句-->
    <insert id="insertUser" parameterType="Nagasawa.valid_X.domain.model.User" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO users (username, display_name, created_at)
        VALUES (#{username}, #{displayName}, #{createdAt})
    </insert>

    <insert id="insertUserEmail" parameterType="Nagasawa.valid_X.domain.model.UserEmail">
        INSERT INTO user_emails (user_id, email, created_at)
        VALUES (#{userId}, #{email}, #{createdAt})
    </insert>

    <insert id="insertProfile" parameterType="Nagasawa.valid_X.domain.model.Profile">
        INSERT INTO profiles (user_id, bio, avatar_url, protected, created_at, updated_at)
        VALUES (#{userId}, #{bio}, #{avatarUrl}, #{protected_}, #{createdAt}, #{updatedAt})
    </insert>

    <insert id="insertCount" parameterType="Nagasawa.valid_X.domain.model.Count">
        INSERT INTO counts (user_id, followers, following, tweets, updated_at)
        VALUES (#{userId}, #{followers}, #{following}, #{tweets}, #{updatedAt})
    </insert>

    <insert id="insertUserPassword" parameterType="Nagasawa.valid_X.domain.model.UserPassword">
        INSERT INTO user_passwords (user_id, password_hash, algorithm, strength, password_updated_at, rehash_required)
        VALUES (#{userId}, #{passwordHash}, #{algorithm}, #{strength}, #{passwordUpdatedAt}, #{rehashRequired})
    </insert>

    <!--update句-->
    <update id="updateUser" parameterType="Nagasawa.valid_X.domain.model.User">
        UPDATE users
        SET
            username = #{username},
            display_name = #{displayName}
        WHERE id = #{id}
    </update>

    <!--delete句-->
    <delete id="deleteUser" parameterType="Nagasawa.valid_X.domain.model.User">
        DELETE FROM users
        WHERE id = #{id}
    </delete>

</mapper>