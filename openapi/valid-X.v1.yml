openapi: 3.0.3
info:
  title: Valid-X
  version: 1.0.0
  description: A simple API like X
servers:
  - url: /

paths:
  /v1/auth/signup:
    post:
      tags: [Auth]
      operationId: auth_signup
      summary: register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterForm"
      responses:
        "202":
          description: Verification email sent (no resource created yet)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Verification email has been sent."
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "409":
          description: Username or email already taken (already registered)
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "422":
          description: Validation failed
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "429":
          description: Too Many Requests (verification re-send throttled)
          headers:
            Retry-After:
              description: Seconds to wait before the next attempt
              schema:
                type: integer
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "500":
          description: Internal server error

  /v1/auth/verify:
    post:
      tags: [Auth]
      operationId: auth_verify
      summary: Verify a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerifyLinkToken"
      responses:
        "201":
          description: CREATED
          headers:
            Location:
              description: "作成されたユーザーのリソースURL"
              required: true
              schema:
                type: string
                format: uri
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreatedUser"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Token not found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "410":
          description: Token expired
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "422":
          description: Validation failed
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "500":
          description: Internal server error

  /v1/auth/verify/resend:
    post:
      tags: [Auth]
      operationId: auth_verify_resend
      summary: Resend verification email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResendVerificationRequest"
      responses:
        "202":
          description: Verification email sent (if eligible). Response is identical even if no pending signup exists.
          headers:
            Retry-After:
              description: Seconds until another resend is allowed (present when throttled hint is needed)
              schema:
                type: integer
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "If an account is pending verification, a new email has been sent."
                  resend_after_seconds:
                    type: integer
                    example: 60
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "422":
          description: Validation failed
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "429":
          description: Too Many Requests (verification re-send throttled)
          headers:
            Retry-After:
              description: Seconds to wait before the next attempt
              schema: { type: integer }
            content:
              application/problem+json:
                schema: { $ref: "#/components/schemas/Problem" }
        "500":
          description: Internal server error

  /v1/auth/login:
    post:
      tags: [Auth]
      operationId: auth_login
      summary: Log in and get a JWT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginForm"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthToken"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "402":
          description: Validation failed
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"

  /v1/auth/me:
    get:
      tags: [Auth]
      operationId: auth_me
      summary: Get current user
      security: [{ bearerAuth: []}]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"

  /v1/users/{user_id}:
    get:
      tags: [Users]
      operationId: users_get
      summary: Get a user by ID
      parameters:
        - name: user_id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"

    patch:
      tags: [Users]
      operationId: users_patch
      summary: Update profile (self)
      security: [{ bearerAuth: [] }]
      parameters:
        - name: user_id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdate"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "403":
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "422":
          description: Validation failed
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"

  /v1/users/{user_id}/followers:
    get:
      tags: [Users]
      operationId: users_followers
      summary: List followers
      parameters:
        - name: user_id
          in: path
          required: true
          schema: { type: string }
        - $ref: "#/components/parameters/CursorParam"
        - $ref: "#/components/parameters/LimitParam"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageUser"

  /v1/users/{user_id}/following:
    get:
      tags: [Users]
      operationId: users_following
      summary: List following
      parameters:
        - name: user_id
          in: path
          required: true
          schema: { type: string }
        - $ref: "#/components/parameters/CursorParam"
        - $ref: "#/components/parameters/LimitParam"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageUser"

  /v1/users/{user_id}/follow:
    post:
      tags: [Follows]
      operationId: follows_create
      summary: Follow a user
      security: [{ bearerAuth: [] }]
      parameters:
        - name: user_id
          in: path
          required: true
          schema: { type: string }
      responses:
        "204": { description: No Content}
        "409":
          description: Already following
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
    delete:
      tags: [Follows]
      operationId: follows_delete
      summary: Unfollow a user
      security: [{ bearerAuth: [] }]
      parameters:
        - name: user_id
          in: path
          required: true
          schema: { type: string }
      responses:
        "204": { description: No Content}
        "404":
          description: Not following
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"

  /v1/tweets:
    post:
      tags: [Tweets]
      operationId: tweets_create
      summary: Create a tweet
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TweetCreate"
      responses:
        "201":
          description: Created
          headers:
            Location:
              description: URL of the created tweet
              required: true
              schema:
                type: string
                format: uri
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tweet"
        "422":
          description: Validation failed
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"

  /v1/tweets/{tweet_id}:
    get:
      tags: [Tweets]
      operationId: tweets_get
      summary: Get a tweet
      parameters:
        - name: tweet_id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tweet"
        "404":
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
    delete:
      tags: [Tweets]
      operationId: tweets_delete
      summary: Delete a tweet (owner only)
      security: [{ bearerAuth: [] }]
      parameters:
        - name: tweet_id
          in: path
          required: true
          schema: { type: string}
      responses:
        "204": { description: No Content}
        "403":
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"

  /v1/users/{user_id}/tweets:
    get:
      tags: [Tweets]
      operationId: users_tweets
      summary: List tweets of a user
      parameters:
        - name: user_id
          in: path
          required: true
          schema: { type: string }
        - $ref: "#/components/parameters/CursorParam"
        - $ref: "#/components/parameters/LimitParam"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageTweet"

  /v1/timelines/home:
    get:
      tags: [Timelines]
      operationId: timelines_home
      summary: Home timeline
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: "#/components/parameters/CursorParam"
        - $ref: "#/components/parameters/LimitParam"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageTweet"

  /v1/tweets/{tweet_id}/like:
    post:
      tags: [Engagements]
      operationId: like_create
      summary: Like a tweet
      security: [{ bearerAuth: [] }]
      parameters:
        - name: tweet_id
          in: path
          required: true
          schema: { type: string }
      responses:
        "204": { description: No Content }
        "404":
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"

    delete:
      tags: [Engagements]
      operationId: like_delete
      summary: Unlike a tweet
      security: [{ bearerAuth: [] }]
      parameters:
        - name: tweet_id
          in: path
          required: true
          schema: { type: string }
      responses:
        "204": { description: No Content}
        "404":
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"

  /v1/tweets/{tweet_id}/repost:
    post:
      tags: [Engagements]
      operationId: repost_create
      summary: Repost a tweet
      security: [{ bearerAuth: [] }]
      parameters:
        - name: tweet_id
          in: path
          required: true
          schema: { type: string }
      responses:
        "204": { description: No Content}
        "404":
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"

    delete:
      tags: [Engagements]
      operationId: repost_delete
      summary: Undo repost
      security: [{ bearerAuth: [] }]
      parameters:
        - name: tweet_id
          in: path
          required: true
          schema: { type: string }
      responses:
        "204": { description: No Content}
        "404":
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    CursorParam:
      name: cursor
      in: query
      required: false
      schema:
        type: string
      description: Opaque cursor for forward pagination
    LimitParam:
      name: limit
      in: query
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
      description: Page size (1-100)
  schemas:
    Problem:
      type: object
      required: [type, title, status]
      properties:
        type:
          type: string
          example: "https://api.example.com/problems/validation_failed"
        title:
          type: string
          example: "Validation failed"
        status:
          type: integer
          format: int32
          example: 433
        detail:
          type: string
          example: "username is already taken"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorDetail"
    ErrorDetail:
      type: object
      properties:
        code:
          type: string
          example: "username_already_exists"
        field:
          type: string
          example: "username"
        message:
          type: string
          example: "This username is not available"
    RegisterForm:
      type: object
      description: "ユーザー新規登録情報の内容"
      required:
        - username
        - display_name
        - email
        - password
      properties:
        username:
          type: string
          description: >
            公開ハンドル。3~30文字。半角英数字とアンダースコアのみ。
            先頭・末尾のアンダースコア不可、連続アンダースコア不可。
          minLength: 3
          maxLength: 30
          pattern: "^(?!_)(?!.*__)[a-z0-9_]+(?<!_)$"
          example: "kenji_369"
        display_name:
          type: string
          description: "表示名。1~50文字。絵文字や日本語も可。前後の空白はサーバーでトリム。"
          minLength: 1
          maxLength: 50
          example: "長澤健二"
        email:
          type: string
          format: email
          description: "確認用メールアドレス。重複不可"
          maxLength: 254
          example: "kenji@example.com"
        password:
          type: string
          description: >
            パスワード。8~64文字。少なくとも英字と数字を各1文字以上含む。
            記号はASCII可。サーバー側でハッシュ化して保存。
          minLength: 8
          maxLength: 64
          pattern: "^(?=.*[A-Za-z])(?=.*[0-9])[ -~]{8,64}$"
          example: "pa55word!"
        locale:
          type: string
          description: "UI既定ロケール（任意）。IETF BCP47。"
          example: "ja-JP"
        timezone:
          type: string
          description: "ユーザーの主なタイムゾーン（任意）。IANA TZ名。"
          example: "Asia/Tokyo"
      example:
        username: "kenji_123"
        display_name: "長澤 健二"
        email: "kenji@example.com"
        password: "Pa55word!"
        locale: "ja-JP"
        timezone: "Asia/Tokyo"

    CreatedUser:
      type: object
      description: "サインアップ時に返される登録ユーザー情報。"
      required:
        - user_id
        - username
        - display_name
        - created_at
      properties:
        user_id:
          type: string
          description: "各ユーザーに対するユニークな識別子"
          example: "01J9HZK2Y3M8QX9PABCD123XYZ"
        username:
          type: string
          description: "登録されたハンドル"
          example: "kenji_369"
        display_name:
          type: string
          description: "表示名。RegisterFormのdisplay_nameと制約が一致している。"
          minLength: 1
          maxLength: 50
          example: "長澤健二"
        created_at:
          type: string
          format: date-time
          description: "UTCのISO-8601。"
          example: "2025-09-01T12:34:56Z"
        email:
          type: string
          format: email
          description: "返すかはポリシー次第（非公開方針なら省略）。"
          nullable: true
          maxLength: 254
          example: "kenji@example.com"
        token:
          type: string
          description: "サインアップ後に即ログイン状態にする場合のJWTアクセストークン（任意）。"
          nullable: true
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        profile:
          type: object
          description: "プロフィールの初期状態。"
          properties:
            bio:
              type: string
              maxLength: 160
              example: ""
            avatar_url:
              type: string
              format: uri
              nullable: true
              example: null
            protected:
              type: boolean
              description: "非公開アカウントフラグ。既定はfalse。"
              example: false
        counts:
          type: object
          description: "初期カウント値。全て0から。"
          properties:
            followers:
              type: integer
              format: int32
              example: 0
            following:
              type: integer
              format: int32
              example: 0
            tweets:
              type: integer
              format: int32
              example: 0
      example:
        user_id: "01J9HZK2Y3M8QX9PABCD123XYZ"
        username: "kenji_123"
        display_name: "長澤 健二"
        created_at: "2025-09-01T12:34:56Z"
        email: "kenji@example.com"
        token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        profile:
          bio: ""
          avatar_url: null
          protected: false
        counts:
          followers: 0
          following: 0
          tweets: 0
    LoginForm:
      type: object
      required: [username_or_email, password]
      properties:
        username_or_email:
          type: string
          description: "username or email"
          example: "kenji_369"
        password:
          type: string
          example: "Pa55word!"
    AuthToken:
      type: object
      required: [token, expires_at]
      properties:
        token:
          type: string
          description: JWT access token
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        expires_at:
          type: string
          format: date-time
          description: Expiration time in UTC
          example: "2025-09-01T13:34:56Z"
    VerifyLinkToken:
      type: object
      required: [token]
      properties:
        token:
          type: string
          minLength: 16
          maxLength: 512
          example: "R3p7dD1W95XkW8rmV2L1mQ"

    ResendVerificationRequest:
      type: object
      oneOf:
        - required: [ email ]
        - required: [ username_or_email ]
      properties:
        email:
          type: string
          format: email
          maxLength: 254
        username_or_email:
          type: string
          maxLength: 254

    User:
      type: object
      required: [user_id, username, display_name, created_at]
      properties:
        user_id:
          type: string
        username:
          type: string
        display_name:
          type: string
        created_at:
          type: string
          format: date-time
        profile:
          type: object
          properties:
            bio:
              type: string
              maxLength: 160
            avatar_url:
              type: string
              format: uri
              nullable: true
            protected:
              type: boolean
          additionalProperties: false
        counts:
          type: object
          properties:
            followers:
              type: integer
              format: int32
            following:
              type: integer
              format: int32
            tweets:
              type: integer
              format: int32
            additionalProperties: false
      example:
        user_id: "01J9HZK2Y3M8QX9PABCD123XYZ"
        username: "kenji_369"
        display_name: "長澤健二"
        created_at: "2025-09-01T12:34:56Z"
        profile:
          bio: ""
          avatar_url: null
          protected: false
        counts:
          followers: 0
          following: 0
          tweets: 0

    TweetCreate:
      type: object
      required: [content]
      properties:
        content:
          type: string
          description: UTF-8 text up to 280 characters
          maxLength: 280
        in_reply_to_tweet_id:
          type: string
          nullable: true
      example:
        content: "Hello World!"

    PageTweet:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/Tweet"
        next_cursor:
          type: string
          nullable: true

    PageUser:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/User"
        next_cursor:
          type: string
          nullable: true

    UserUpdate:
      type: object
      properties:
        display_name:
          type: string
          minLength: 1
          maxLength: 50
        profile:
          type: object
          properties:
            bio:
              type: string
              maxLength: 160
            avatar_url:
              type: string
              format: uri
              nullable: true
            protected:
              type: boolean
      additionalProperties: false









